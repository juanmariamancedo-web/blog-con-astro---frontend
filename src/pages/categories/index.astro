---
import MainLayout from "../../layouts/MainLayout.astro"
import PaginationCategories from "./components/PaginationCategories"
import Search from "./components/Search"
import createSearchCategory from "./utils/createSearchCategory"
import type {Welcome} from "../../models/categoriesAndTags"
import type { CategoryAndTagMapping } from "../../models/categoryAndTagMapping"

const API_URL = import.meta.env.PUBLIC_API_URL
    
async function obtainCategories(page:number): Promise<Welcome>{
    const postsParcials = await fetch(`${API_URL}/api/categories?pagination[page]=${page}&pagination[pageSize]=2&populate=posts`) 
    return postsParcials.json()
}

let page = 1

const categories = await obtainCategories(page)

const totalPages = categories.meta.pagination.total

var categoriesArray = categories.data

while(page < totalPages){ 
    ++page
    
    const categoriesParcials = await obtainCategories(page)
    
    categoriesArray = [...categoriesArray, ...categoriesParcials.data]
}

const categoriesToUpdateRaw = await Promise.all(categoriesArray.map(async(category)=>{
    try {
      const result = await createSearchCategory(category);
      console.log(`Category "${category.id}" updated successfully.`);
      return result;
    } catch (error) {
      console.error(`Error updating category "${category}":`, error);
      throw error;
    }
}))

const categoriesToUpdate = categoriesToUpdateRaw.filter((elemento): elemento is CategoryAndTagMapping => elemento !== undefined)
---

<MainLayout title="" description="">
    <section class="flex flex-col justify-center items-center">
        <div class="container p-3 flex justify-start">
            <Search client:load categories={categoriesToUpdate} />
        </div> 
        <PaginationCategories categories={categoriesToUpdate} client:load/>
    </section>
</MainLayout>